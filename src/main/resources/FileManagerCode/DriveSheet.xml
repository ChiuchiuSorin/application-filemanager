<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.1">
  <web>FileManagerCode</web>
  <name>DriveSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401094916000</creationDate>
  <parent>DriveClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401197958000</date>
  <contentUpdateDate>1401197785000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
## We need to use HQL because XWQL doesn't support nested queries.
#set ($selectAllFoldersFromDriveHQL = "select folderDoc.name from XWikiDocument folderDoc, BaseObject folderObj where folderDoc.space = :space and folderObj.name = folderDoc.fullName and folderObj.className = 'FileManagerCode.FolderClass'")

#macro (handleDriveWebServiceRequest)
  #if ($request.action)
    #if ($services.csrf.isTokenValid($request.form_token))
      #if ($request.action == 'newFolder')
        #createRootFolder
      #end
    #elseif ($isAjaxRequest)
      $response.sendError(403, 'The CSRF token is missing.')
    #else
      $response.sendRedirect($services.csrf.getResubmissionURL())
    #end
  #else
    #set ($discard = $response.setContentType('application/json'))
    #if ($request.data == 'childFolders')
      #getRootFolders
    #elseif ($request.data == 'allFiles')
      #getAllFiles
    #elseif ($request.data == 'orphanFolders')
      #getOrphanFolders
    #elseif ($request.data == 'orphanFiles')
      #getOrphanFiles
    #else
      #getDrive
    #end
    $jsontool.serialize($data)
  #end
#end

#macro (createRootFolder)
  #set ($name = $request.name)
  #if ("$!name" == '')
    #set ($name = 'Untitled Folder')
  #end
  #getUniquePageName($name $id)
  #set ($folderReference = $services.model.createDocumentReference($doc.wiki, $doc.space, $id))
  $response.sendRedirect($xwiki.getURL($folderReference, 'save', $escapetool.url({
    'title': $name,
    'parent': $doc.name,
    'template': 'FileManagerCode.FolderTemplate',
    'form_token': $request.form_token,
    'xredirect': $xwiki.getURL($folderReference, 'get', 'outputSyntax=plain')
  })))
#end

#macro (getUniquePageName $name $return)
  #set ($documentReference = $services.model.createDocumentReference($doc.wiki, $doc.space, $name))
  #if (!$xwiki.exists($documentReference))
    #set ($uniqueName = $name)
  #else
    #set ($found = false)
    #foreach ($counter in [1..99])
      #set ($uniqueName = "$name$counter")
      #set ($documentReference = $services.model.createDocumentReference($doc.wiki, $doc.space, $uniqueName))
      #if (!$xwiki.exists($documentReference))
        #set ($found = true)
        #break
      #end
    #end
    #if (!$found)
      #set ($uniqueName = "$name$mathtool.random(100, 1000)")
    #end
  #end
  #set ($return = $NULL)
  #setVariable("$return" $uniqueName)
#end

#macro (getRootFolders)
  #set ($statement = 'from doc.object(FileManagerCode.FolderClass) as folder where doc.space = :space and doc.parent = :parent')
  #getFolders($statement {'space': $doc.space, 'parent': $doc.name})
#end

#macro (getOrphanFolders)
  #set ($statement = "from doc.object(FileManagerCode.FolderClass) as folder where doc.space = :space and (doc.parent = '' or (doc.parent &lt;&gt; :parent and doc.parent not in ($selectAllFoldersFromDriveHQL)))")
  #getFolders($statement {'space': $doc.space, 'parent': $doc.name})
#end

#macro (getFolders $statement $parameters)
  #set ($query = $services.query.xwql("$statement order by doc.name"))
  #set ($countQuery = $services.query.xwql($statement).addFilter('count'))
  #foreach ($entry in $parameters.entrySet())
    #set ($discard = $query.bindValue($entry.key, $entry.value))
    #set ($discard = $countQuery.bindValue($entry.key, $entry.value))
  #end
  #set ($folderCount = $countQuery.execute().get(0))
  #set ($folders = [])
  #set ($offset = $mathtool.toInteger($request.offset))
  #if ($offset)
    #set ($discard = $query.setOffset($offset))
  #end
  #set ($limit = $mathtool.toInteger($request.limit))
  #if ($limit)
    #set ($discard = $query.setLimit($limit))
  #end
  #foreach ($folder in $query.execute())
    #set ($folderDoc = $xwiki.getDocument($folder))
    #set ($discard = $folders.add({
      'id': $folderDoc.name,
      'name': $folderDoc.plainTitle,
      'url': $folderDoc.getURL('get')
    }))
  #end
  #set ($data = {
    'folderCount': $folderCount,
    'offset': $offset,
    'folders': $folders
  })
#end

#macro (getAllFiles)
  #set ($statement = 'from doc.object(FileManagerCode.FileClass) as file where doc.space = :space')
  #getFiles($statement {'space': $doc.space})
#end

#macro (getOrphanFiles)
  ## A file can have multiple parent folders, which are declared using tags, and one of these parent folders, usually
  ## the first, is set as wiki page parent so that a tree widget (such as the XWiki explorer tree) can still display the
  ## hierarchy nicely.
  #set ($statement = "from doc.object(FileManagerCode.FileClass) as file where doc.space = :space and (doc.parent = '' or doc.parent not in ($selectAllFoldersFromDriveHQL))")
  #getFiles($statement {'space': $doc.space})
#end

#macro (getFiles $statement $parameters)
  #set ($query = $services.query.xwql("$statement order by doc.name"))
  #set ($countQuery = $services.query.xwql($statement).addFilter('count'))
  #foreach ($entry in $parameters.entrySet())
    #set ($discard = $query.bindValue($entry.key, $entry.value))
    #set ($discard = $countQuery.bindValue($entry.key, $entry.value))
  #end
  #set ($fileCount = $countQuery.execute().get(0))
  #set ($files = [])
  #set ($offset = $mathtool.toInteger($request.offset))
  #if ($offset)
    #set ($discard = $query.setOffset($offset))
  #end
  #set ($limit = $mathtool.toInteger($request.limit))
  #if ($limit)
    #set ($discard = $query.setLimit($limit))
  #end
  #foreach ($file in $query.execute())
    #set ($fileDoc = $xwiki.getDocument($file))
    #set ($attach = $fileDoc.attachmentList.get(0))
    #set ($discard = $files.add({
      'id': $fileDoc.name,
      'name': $attach.filename,
      'date': $fileDoc.date,
      'author': $fileDoc.author,
      'size': $attach.filesize,
      'mediaType': $attach.mimeType,
      'version': $fileDoc.version,
      'description': $fileDoc.display('description'),
      'url': $fileDoc.getURL('get')
    }))
  #end
  #set ($data = {
    'fileCount': $fileCount,
    'offset': $offset,
    'files': $files
  })
#end

#macro (getDrive)
  #if ($doc.title != '')
    #set ($name = $doc.plainTitle)
  #else
    #set ($name = $doc.space)
  #end
  #set ($data = {
    'id': $doc.space,
    'name': $name,
    'url': $doc.getURL('get')
  })
#end

#macro (displayDrive)
  This is a drive.
#end
{{/velocity}}

{{velocity}}
#if ($xcontext.action == 'get')
  #handleDriveWebServiceRequest
#else
  #displayDrive
#end
{{/velocity}}</content>
</xwikidoc>
