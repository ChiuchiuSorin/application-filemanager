<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.1">
  <web>FileManagerCode</web>
  <name>FolderSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1400774933000</creationDate>
  <parent>FileManagerCode.FolderClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401435914000</date>
  <contentUpdateDate>1401372149000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="FileManagerCode.Macros" /}}

{{velocity output="false"}}
#macro (handleFolderWebServiceRequest)
  #if ($request.action)
    #if ($services.csrf.isTokenValid($request.form_token))
      #if ($request.action == 'newFolder')
        #createFolder($request.name $doc)
      #elseif ($request.action == 'newFile')
        #createFile
      #elseif ($request.action == 'move')
        #moveFolder
      #elseif ($request.action == 'copy')
        #copyFolder
      #elseif ($request.action == 'delete')
        #deleteFolder
      #end
    #elseif ($isAjaxRequest)
      $response.sendError(403, 'The CSRF token is missing.')
    #else
      $response.sendRedirect($services.csrf.getResubmissionURL())
    #end
  #else
    #set ($discard = $response.setContentType('application/json'))
    #if ($request.data == 'files')
      #getChildFiles($doc $data)
    #elseif ($request.data == 'folders')
      #getChildFolders($doc $data)
    #else
      #getFolder($doc $data)
    #end
    $jsontool.serialize($data)
  #end
#end

#macro (createFile)
  ## TODO
#end

#macro (moveFolder)
  #set ($parentId = $request.parent)
  #if ("$!parentId" != '')
    ## Move this folder to a different (parent) folder.
    #set ($newParentReference = $services.model.createDocumentReference($doc.wiki, $doc.space, $parentId))
    #set ($newParent = $services.model.serialize($newParentReference, 'local'))
    #if ($doc.parent != $newParent)
      #set ($discard = $doc.setParent($newParent))
      #set ($discard = $doc.save('Folder moved'))
    #end
  #end
  #set ($name = $request.name)
  #if ("$!name" != '' &amp;&amp; $doc.plainTitle != $name)
    ## Rename this folder.
    #set ($oldId = $doc.name)
    #set ($childFilesQuery = $services.query.xwql($selectChildFiles))
    #set ($discard = $childFilesQuery.bindValue('space', $doc.space).bindValue('tag', $oldId))
    #set ($files = $childFilesQuery.execute())
    #set ($childFoldersQuery = $services.query.xwql($selectChildFolders))
    #set ($docNameAsReference = $services.model.serialize($doc.documentReference, 'compact', $doc.documentReference))
    #set ($discard = $childFoldersQuery.bindValue('space', $doc.space).bindValue('parent',
      [$doc.fullName, $docNameAsReference]))
    #set ($folders = $childFoldersQuery.execute())
    #getUniquePageName($name $newId)
    #set ($newFolderReference = $services.model.createDocumentReference($doc.wiki, $doc.space, $newId))
    #set ($discard = $doc.rename($services.model.serialize($newFolderReference, 'local')))
    ## Fix the parent field for all the child folders.
    #foreach ($folder in $folders)
      #set ($folderDoc = $xwiki.getDocument($folder))
      #fixParent($folderDoc)
      #set ($discard = $folderDoc.save('Fixed parent field after the parent folder has been renamed.', true))
    #end
    ## Update the child files to point to the new parent id (this isn't done automatically because we're using tags).
    #foreach ($file in $files)
      #set ($fileDoc = $xwiki.getDocument($file))
      #set ($tags = $fileDoc.getObject('XWiki.TagClass').getProperty('tags').value)
      #set ($discard = $tags.remove($oldId))
      #set ($discard = $tags.add($newId))
      #fixParent($fileDoc)
      #set ($discard = $fileDoc.save('Updated file after parent folder has been renamed.', true))
    #end
  #end
  #set ($discard = $response.sendRedirect($doc.getURL('get', 'outputSyntax=plain')))
#end

#macro (fixParent $document)
  ## Make sure the space is included in the value of the parent field. This is needed in order to be able to compute the
  ## list of orphan files and folders.
  #set ($parentReference = $services.model.resolveDocument($document.parent, 'explicit', $document.documentReference))
  #set ($discard = $document.setParent($services.model.serialize($parentReference, 'compactwiki',
    $document.documentReference)))
#end

#macro (copyFolder)
  ## TODO
#end

#macro (deleteFolder)
  ## TODO
#end

#macro (getChildFiles $parentDoc $return)
  #getFiles($selectChildFiles {'space': $parentDoc.space, 'tag': $parentDoc.name} $_return)
  #set ($return = $NULL)
  #setVariable("$return" $_return)
#end

#macro (displayFolder)
  #set ($discard = $xwiki.ssx.use('FileManagerCode.FolderSheet'))
  #getFolder($doc $folder)
  (% class="listing" %)(((
  #if ($folder.parent)
    #set ($reference = $services.model.createDocumentReference($doc.wiki, $doc.space, $folder.parent.id))
    * [[image:icon:folder||class="icon"]] [[..&gt;&gt;$reference]]
  #end
  ## List the child folders.
  #getChildFolders($doc $folders)
  #foreach ($childFolder in $folders.list)
    #set ($reference = $services.model.createDocumentReference($doc.wiki, $doc.space, $childFolder.id))
    * [[image:icon:folder||class="icon"]] [[$childFolder.name&gt;&gt;$reference]]
  #end
  ## List the child files.
  #getChildFiles($doc $files)
  #foreach ($file in $files.list)
    #set ($reference = $services.model.createDocumentReference($doc.wiki, $doc.space, $file.id))
    * {{html}}#mimetypeimg($file.mediaType.toLowerCase() $file.name.toLowerCase()){{/html}} [[$file.name&gt;&gt;$reference]]
  #end
  )))
#end
{{/velocity}}

{{velocity}}
#if ($xcontext.action == 'get')
  #handleFolderWebServiceRequest
#else
  #displayFolder
#end
{{/velocity}}</content>
  <object>
    <name>FileManagerCode.FolderSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>1344bc95-fcd9-4e4a-bde3-bbf699bad935</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.listing ul {
  list-style: none;
  margin: 0;
}

.listing li &gt; img {
  vertical-align: middle;
}</code>
    </property>
    <property>
      <name>Style</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
