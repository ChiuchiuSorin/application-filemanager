<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>FileManagerCode</web>
  <name>DriveSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401094916000</creationDate>
  <parent>DriveClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401280484000</date>
  <contentUpdateDate>1401204779000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="FileManagerCode.Macros" /}}

{{velocity output="false"}}
## We need to use HQL because XWQL doesn't support nested queries.
#set ($selectAllFoldersFromDriveHQL = "select folderDoc.fullName from XWikiDocument folderDoc, BaseObject folderObj where folderDoc.space = :space and folderObj.name = folderDoc.fullName and folderObj.className = 'FileManagerCode.FolderClass'")

#macro (handleDriveWebServiceRequest)
  #if ($request.action)
    #if ($services.csrf.isTokenValid($request.form_token))
      #if ($request.action == 'createFolder')
        #createFolder($request.name $doc)
      #elseif ($request.action == 'move')
        #batchMove
      #elseif ($request.action == 'copy')
        #batchCopy
      #elseif ($request.action == 'delete')
        #batchDelete
      #end
    #elseif ($isAjaxRequest)
      $response.sendError(403, 'The CSRF token is missing.')
    #else
      $response.sendRedirect($services.csrf.getResubmissionURL())
    #end
  #else
    #set ($data = $NULL)
    #if ($request.data == 'folders')
      #getChildFolders($doc $data)
    #elseif ($request.data == 'allFiles')
      #getAllFiles
    #elseif ($request.data == 'orphanFolders')
      #getOrphanFolders
    #elseif ($request.data == 'orphanFiles')
      #getOrphanFiles
    #elseif ($request.data == 'activeJobs')
      #getActiveJobs($data)
    #elseif ($request.data == 'jobStatus')
      #getJobStatus($request.id $data)
    #else
      #getDrive
    #end
    #if ($data)
      #set ($discard = $response.setContentType('application/json'))
      $jsontool.serialize($data)
    #else
      $response.sendError(404);
    #end
  #end
#end

#macro (batchMove)
  ## TODO: Read the collection of paths and the destination from the request.
  #set ($paths = [])
  #set ($destination = [])
  #set ($jobId = $services.drive.move($paths, $destination))
  #handleJobStartFailure($jobId)
#end

#macro (batchCopy)
  ## TODO: Read the collection of paths and the destination from the request.
  #set ($paths = [])
  #set ($destination = [])
  #set ($jobId = $services.drive.copy($paths, $destination))
  #handleJobStartFailure($jobId)
#end

#macro (batchDelete)
  ## TODO: Read the collection of paths from the request.
  #set ($paths = [])
  #set ($jobId = $services.drive.delete($paths))
  #handleJobStartFailure($jobId)
#end

#macro (getOrphanFolders)
  #set ($statement = "from doc.object(FileManagerCode.FolderClass) as folder where doc.space = :space and (doc.parent = '' or (doc.parent &lt;&gt; :parent and doc.parent not in ($selectAllFoldersFromDriveHQL)))")
  #getFolders($statement {'space': $doc.space, 'parent': $doc.fullName} $data)
#end

#macro (getAllFiles)
  #getFilesStatement('doc.space = :space' $statement)
  #getFiles($statement {'space': $doc.space} $data)
#end

#macro (getOrphanFiles)
  ## A file can have multiple parent folders, which are declared using tags, and one of these parent folders, usually
  ## the first, is set as wiki page parent so that a tree widget (such as the XWiki explorer tree) can still display the
  ## hierarchy nicely.
  #getFilesStatement("doc.space = :space and (doc.parent = '' or doc.parent not in ($selectAllFoldersFromDriveHQL))" $statement)
  #getFiles($statement {'space': $doc.space} $data)
#end

#macro (getDrive)
  #if ($doc.title != '')
    #set ($name = $doc.plainTitle)
  #else
    #set ($name = $doc.space)
  #end
  #set ($data = {
    'id': $doc.name,
    'name': $name
  })
#end

#macro (displayDrive)
  {{html clean="false"}}
  #set ($discard = $xwiki.ssx.use('FileManagerCode.DriveSheet'))
  #set ($discard = $xwiki.jsx.use('FileManagerCode.DriveSheet', {'minify': false}))
  #set ($discard = $xwiki.ssfx.use('js/xwiki/table/livetable.css', true))
  #set ($columns = [
    {
      'id': 'name',
      'title': $services.localization.render('Name'),
      'type': 'file',
      'sortable': true
    }, {
      'id': 'size',
      'title': $services.localization.render('Size'),
      'type': 'bytes',
      'sortable': true
    }, {
      'id': 'mediaType',
      'title': $services.localization.render('Type'),
      'type': 'mediaType'
    }, {
      'id': 'date',
      'title': $services.localization.render('Modified'),
      'type': 'date',
      'sortable': true
    }, {
      'id': 'author',
      'title': $services.localization.render('Author'),
      'type': 'user',
      'sortable': true
    }
  ])
  &lt;div ng-app="drive" ng-controller="DriveCtrl"&gt;
    &lt;table class="pane-splitter"&gt;
      &lt;tr&gt;
        &lt;td class="pane left"&gt;
          &lt;drive-tree&gt;&lt;/drive-tree&gt;
        &lt;/td&gt;
        &lt;td class="pane-splitter-handler"&gt;
          &lt;div&gt;&amp;equiv;&lt;/div&gt;
        &lt;/td&gt;
        &lt;td class="pane right"&gt;
          &lt;livetable ng-if="source" id="files" source="source"
            columns="$escapetool.xml($jsontool.serialize($columns))"&gt;&lt;/livetable&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/div&gt;
  {{/html}}
#end
{{/velocity}}

{{velocity wiki="false"}}
#if ($xcontext.action == 'get')
  #handleDriveWebServiceRequest
#end
{{/velocity}}{{velocity}}
#if ($xcontext.action != 'get')
  #displayDrive
#end
{{/velocity}}</content>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d9f9fdc1-3059-4d56-bfe4-0d8ef78cbab2</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    angular: '//ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular.min',
    'angular-resource': '//ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular-resource.min',
    liveTable: '$xwiki.getURL("FileManagerCode.LiveTable", "jsx", "language=$xcontext.language&amp;minify=false")',
    pagination: '$xwiki.getURL("FileManagerCode.Pagination", "jsx", "language=$xcontext.language&amp;minify=false")',
    jsTree: '//cdnjs.cloudflare.com/ajax/libs/jstree/3.0.2/jstree.min'
  },
  shim: {
    angular: {
      exports: 'angular'
    },
    'angular-resource': {
      deps: ['angular'],
      exports: 'angular'
    },
    jsTree: {
      deps: ['jquery']
    }
  }
});

(function loadCss(url) {
  var link = document.createElement("link");
  link.type = "text/css";
  link.rel = "stylesheet";
  link.href = url;
  document.getElementsByTagName("head")[0].appendChild(link);
})('//cdnjs.cloudflare.com/ajax/libs/jstree/3.0.2/themes/default/style.min.css');

require(['jquery', 'angular', 'angular-resource', 'liveTable', 'jsTree'], function($, angular) {
  var drive = angular.module('drive', ['driveServices', 'driveDirectives', 'driveFilters', 'liveTable']);

  drive.controller('DriveCtrl', ['$scope', 'Drive', 'Folder', function ($scope, Drive, Folder) {
    var asSource = function(service){
      return {get: service};
    }

    var selectedNode = null;
    $scope.$on('driveTree:selectionChange', function(event, selectedNodes) {
      if (selectedNodes.length != 1) {
        selectedNode = $scope.source = null;
        return;
      } else if (selectedNode == selectedNodes[0]) {
        return;
      } else if (selectedNodes[0] == '/allFiles') {
        $scope.source = asSource(Drive.getAllFiles);
      } else if (selectedNodes[0] == '/orphanFiles') {
        $scope.source = asSource(Drive.getOrphanFiles);
      } else if (selectedNodes[0] == '/activeJobs') {
        // TODO
        $scope.source = null;
      } else if (selectedNodes[0] == '/orphanFolders' || selectedNodes[0] == XWiki.currentPage) {
        $scope.source = null;
      } else {
        var selectedFolder = Folder.bind({page: selectedNodes[0]});
        $scope.source = asSource($.proxy(selectedFolder.getFiles, selectedFolder));
      }
      selectedNode = selectedNodes[0];
    });
  }]);
});</code>
    </property>
    <property>
      <name>App</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>39e1dccf-38d0-4709-90b1-f466d7728ab6</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'angular', 'angular-resource'], function($, angular) {
  var driveServices = angular.module('driveServices', ['ngResource']);

  var defaultParams = {
    outputSyntax: 'plain',
    space: XWiki.currentSpace,
    page: XWiki.currentPage
  };

  // The colon ':' is URL-encoded so we must decode it otherwise Angular won't find the parameter.
  var url = new XWiki.Document(':page', ':space').getURL('get').replace(/\/%3A/g, '/:');

  var addGET = function(api, data) {
    api['get' + data.substr(0, 1).toUpperCase() + data.substr(1)] = {
      params: {data: data}
    }
  };

  var formToken = $('meta[name=form_token]').attr('content');

  var addPOST = function(api, action) {
    // TODO: Maybe we should submit the data as JSON (Angular's default behaviour) but for this we need to enhance the
    // JSON Velocity tool to read the request payload on the server side. We can use Jackson's raw/untyped/simple data
    // binding (see http://wiki.fasterxml.com/JacksonInFiveMinutes#A.22Raw.22_Data_Binding_Example ).
    api[action] = {
      method: 'POST',
      params: {
        action: action,
        form_token: formToken
      },
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
      }
    }
  }

  var createAPI = function(data, actions) {
    var api = {};

    $.each(data, function(index, value) {
      addGET(api, value);
    });

    $.each(actions, function(index, value) {
      addPOST(api, value);
    });

    return api;
  }

  driveServices.factory('Drive', ['$resource', function($resource) {
    var data = ['folders', 'allFiles', 'orphanFolders', 'orphanFiles', 'activeJobs', 'jobStatus'];
    var actions = ['createFolder', 'createFile', 'move', 'copy', 'delete'];
    var api = createAPI(data, actions);
    api.getActiveJobs.isArray = true;
    return $resource(url, defaultParams, api);
  }]);

  driveServices.factory('Folder', ['$resource', function($resource) {
    var data = ['files', 'folders'];
    var actions = ['createFolder', 'createFile', 'move', 'copy', 'delete'];
    var api = createAPI(data, actions);
    return $resource(url, defaultParams, api);
  }]);

  driveServices.factory('File', ['$resource', function($resource) {
    var data = [];
    var actions = ['label', 'move', 'copy', 'delete'];
    var api = createAPI(data, actions);
    return $resource(url, defaultParams, api);
  }]);

  driveServices.factory('User', ['$resource', function($resource) {
    var url = new XWiki.Document(':page', ':space', ':wiki').getRestURL('objects/XWiki.XWikiUsers/0');
    return $resource(url, {}, {
      get: {cache: true}
    });
  }]);
});</code>
    </property>
    <property>
      <name>Services</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>4af06c3a-4fbf-4c6f-8d87-01c56417dfbb</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'angular'], function($, angular) {
  var driveDirectives = angular.module('driveDirectives', ['driveServices']);

  driveDirectives.directive('file',  function() {
    var categories = {
      Text: {
        html: 'html',
        css: 'css',
        page_white_c: 'c',
        page_white_code: 'xml',
        page_white_cplusplus: ['cpp', 'c++'],
        page_white_csharp: 'cs',
        page_white_cup: 'java',
        page_white_database: 'sql',
        page_white_h: 'h',
        page_white_php: 'php',
        page_white_ruby: 'ruby',
        page_white_text: 'txt',
        script: 'js'
      },
      Image: {
        page_white_vector: 'svg',
        picture: ['jpg', 'jpeg', 'png', 'gif']
      },
      Audio: {
        music: ['ogg', 'flac', 'mp3', 'wav']
      },
      Video: {
        film: ['ogv', 'mk', 'avi', 'divx', 'mov'],
        page_white_flash: ['flv', 'fla', 'swf']
      },
      Document: {
        page_red: 'ps',
        page_white_acrobat: 'pdf',
        page_white_word: ['odt', 'odf', 'doc', 'sxw', 'stw']
      },
      Presentation: {
        page_white_powerpoint: ['odp', 'ppt']
      },
      Spreadsheet: {
        page_white_excel: ['ods', 'xls']
      },
      Archive: {
        cup: 'jar',
        package: 'xar',
        page_white_compressed: ['bz', 'bz2', 'tbz', 'gz', 'tgz', 'rar'],
        page_white_zip: ['zip', '7z']
      },
      Font: {
        font: ['ttf', 'ttc']
      }
    };

    var getIcon = function(fileName) {
      var extensionIndex = fileName.lastIndexOf('.');
      if (extensionIndex &lt; 0) {
        return null;
      } else {
        var extension = fileName.substr(extensionIndex + 1);
        for (var category in categories) {
          var icons = categories[category];
          for (var icon in icons) {
            var extensions = icons[icon];
            if (!angular.isArray(extensions)) {
              extensions = [extensions];
            }
            for (var i = 0; i &lt; extensions.length; i++) {
              if (extension == extensions[i]) {
                return {name: icon, type: category};
              }
            }
          }
        }
      }
    };

    return {
      restrict: 'A',
      scope: {},
      template: '&lt;img ng-src="{{icon}}" alt="{{type}}" title="{{type}}" class="icon" /&gt; &lt;a href="{{url}}"&gt;{{name}}&lt;/a&gt;',
      link: function(scope, element, attrs) {
        scope.name = attrs.file;
        scope.url = new XWiki.Document(attrs.file).getURL();
        scope.icon = "$xwiki.getSkinFile('icons/silk/page_white.png')";
        scope.type = 'Attachment';
        var icon = getIcon(attrs.file);
        if (icon) {
          scope.icon = scope.icon.replace('page_white', icon.name);
          scope.type = icon.type;
        }
      }
    }
  });

  driveDirectives.directive('user',  ['User', function(User) {
    var documentURLTemplate = '$xwiki.getURL($services.model.createDocumentReference("__wiki__", "__space__", "__page__"))';
    var getDocumentURL = function(wiki, space, page) {
      var url = documentURLTemplate.replace('__wiki__', encodeURIComponent(wiki));
      url = url.replace('__space__', encodeURIComponent(space));
      return url.replace('__page__', encodeURIComponent(page));
    };

    var attachmentURLTemplate = '$xwiki.getAttachmentURL("__wiki__:__space__.__page__", "__file__")';
    var getAttachmentURL = function(wiki, space, page, file) {
      var url = attachmentURLTemplate.replace('__wiki__', encodeURIComponent(wiki));
      url = url.replace('__space__', encodeURIComponent(space));
      url = url.replace('__page__', encodeURIComponent(page));
      return url.replace('__file__', encodeURIComponent(file));
    };

    var getPropertyValue = function(user, name) {
      for (var i = 0; i &lt; user.properties.length; i++) {
        var property = user.properties[i];
        if (property.name == name) {
          return property.value;
        }
      }
      return null;
    };

    var noAvatar = '$xwiki.getSkinFile("/icons/xwiki/noavatar.png", true)';
    var getAvatar = function(user) {
      var avatar = getPropertyValue(user, 'avatar') || '';
      if (avatar != '') {
        var avatarURL = getAttachmentURL(user.wiki, user.space, user.pageName, avatar);
        // Resize the avatar image on the server (use the medium avatar size as it may have been already cached on the
        // server since it is used for comments).
        return avatarURL + '?width=50';
      } else {
        return noAvatar;
      }
    };

    var getName = function(user) {
      var firstName = getPropertyValue(user, 'first_name') || '';
      var lastName = getPropertyValue(user, 'last_name') || '';
      var name = (firstName + ' ' + lastName).trim();
      if (name == '') {
        name = user.pageName;
        if (user.wiki != XWiki.currentWiki) {
          name += ' (' + user.wiki + ')';
        }
      }
      return name;
    };

    return {
      restrict: 'A',
      scope: {},
      template: '&lt;img ng-src="{{avatar}}" alt="Avatar" class="avatar" /&gt; &lt;a href="{{url}}"&gt;{{name}}&lt;/a&gt;',
      link: function(scope, element, attrs) {
        var reference = XWiki.Model.resolve(attrs.user, XWiki.EntityType.DOCUMENT);
        var params = {
          wiki: reference.extractReferenceValue(XWiki.EntityType.WIKI) || XWiki.currentWiki,
          space: reference.extractReferenceValue(XWiki.EntityType.SPACE) || XWiki.currentSpace,
          page: reference.name
        };
        scope.url = getDocumentURL(params.wiki, params.space, params.page);
        // Default value for avatar and name, in case the user doesn't exist.
        scope.name = reference.name;
        scope.avatar = noAvatar;
        User.get(params, function(user) {
          scope.avatar = getAvatar(user);
          scope.name = getName(user);
        });
      }
    }
  }]);

  driveDirectives.directive('paneSplitterHandler', function() {
    return {
      restrict: 'C',
      scope: {},
      link: function(scope, element, attrs) {
        var splitter = $(element).closest('.pane-splitter');
        var leftPane = $(element).prev();
        var startClientX, leftPaneWidth, splitterWidthFactor;

        var resize = function(delta) {
          var absoluteWidth = leftPaneWidth + delta;
          var width = Math.max(absoluteWidth, 0) * splitterWidthFactor;
          // The width must be between 10% and 90%.
          width = Math.min(Math.max(width, 10), 90);
          leftPane.css('width', width + '%');
        };

        splitter.on('mousemove', function (event) {
          if (!startClientX) {
            return;
          }

          var delta = event.clientX - startClientX;
          var callback = function() {
            resize(delta);
          };

          // See https://developer.mozilla.org/en-US/docs/Web/Events/resize#requestAnimationFrame
          if (window.requestAnimationFrame) {
            window.requestAnimationFrame(callback);
          } else {
            setTimeout(callback, 66);
          }
        });

        element.on('mousedown', function (event) {
          event.preventDefault();
          startClientX = event.clientX;
          leftPaneWidth = leftPane[0].offsetWidth;
          splitterWidthFactor = 100 / splitter[0].offsetWidth;
          // Make sure the cursor doesn't flicker.
          splitter.css('cursor', 'ew-resize');
        });

        $(document).on('mouseup', function (event) {
          startClientX = null;
          // Reset the cursor.
          splitter.css('cursor', '');
        });
      }
    };
  });
});</code>
    </property>
    <property>
      <name>Directives: file, user, pane-splitter-handler</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>24497a15-b82a-4bac-8ae5-12d53ca01ac8</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'angular', 'jsTree'], function($, angular) {
  var driveDirectives = angular.module('driveDirectives');

  driveDirectives.directive('driveTree', ['$location', 'Drive', 'Folder', function($location, Drive, Folder) {
    var getChildren = function(node, callback) {
      callback = $.proxy(callback, this);
      if (node.id == '#') {
        getRootNode(callback);
      } else if (node.id == XWiki.currentPage) {
        getDriveChildNodes(callback);
      } else if (node.id == '/orphanFolders') {
        Drive.getOrphanFolders({}, getChildrenCallback(callback));
      } else if (node.id == '/activeJobs') {
        // TODO
        callback([]);
      } else {
        Folder.getFolders({page: node.id}, getChildrenCallback(callback));
      }
    };

    var getChildrenCallback = function(callback) {
      return function(folders) {
        callback(asFolderNodes(folders.list));
      };
    };

    var metaNodes = [
      {
        id: '/allFiles',
        text: 'All Files',
        icon: '$xwiki.getSkinFile("icons/silk/page_white_stack.png")',
        state: {
          selected: false
        }
      },
      {
        id: '/orphanFiles',
        text: 'Orphan Files',
        icon: '$xwiki.getSkinFile("icons/silk/page_white_error.png")',
        state: {
          selected: false
        }
      },
      {
        id: '/orphanFolders',
        text: 'Orphan Folders',
        icon: '$xwiki.getSkinFile("icons/silk/folder_error.png")',
        state: {
          selected: false
        },
        children: true
      },
      {
        id: '/activeJobs',
        text: 'Active Jobs',
        icon: '$xwiki.getSkinFile("icons/silk/clock.png")',
        state: {
          selected: false
        },
        children: true
      }
    ];

    var getRootNode = function(callback) {
      Drive.get({}, function(drive) {
        drive.type = 'drive';
        callback({
          id: drive.id,
          text: drive.name,
          icon: '$xwiki.getSkinFile("icons/silk/drive.png")',
          state: {
            opened: true,
            selected: false
          },
          children: true,
          data: drive
        });
      });
    };

    var getDriveChildNodes = function(callback) {
      Drive.getFolders({}, function(folders) {
        callback(asFolderNodes(folders.list).concat(metaNodes));
      });
    };

    var asFolderNodes = function(folders) {
      var folderNodes = [];
      for (var i = 0; i &lt; folders.length; i++) {
        folderNodes.push(asFolderNode(folders[i]));
      }
      return folderNodes;
    };

    var asFolderNode = function(folder) {
      folder.type = 'folder';
      return {
        id: folder.id,
        text: folder.name,
        icon: '$xwiki.getSkinFile("icons/silk/folder.png")',
        state: {
          selected: false
        },
        children: !!folder.id,
        data: folder
      }
    };

    var selectNode = function(tree, nodeId) {
      if (tree.get_node(nodeId)) {
        // The specified node is already loaded in the tree.
        tree.select_node(nodeId);
      } else {
        // The specified node must be a folder. We need to get the folder path in order to load all its ancestors.
        Folder.get({'page': nodeId}, function(folder) {
          if (folder &amp;&amp; folder.path) {
            var path = folder.path.slice().reverse();
            path.push(folder.id);
            selectPath(tree, path, true);
          }
        });
      }
    };

    var selectPath = function(tree, path, isRoot) {
      if (path.length &gt; 0) {
        if (tree.get_node(path[0])) {
          // The specified node is already loaded in the tree.
          if (path.length &gt; 1) {
            tree.open_node(path[0], function() {
              selectPath(tree, path.slice(1));
            });
          } else {
            tree.select_node(path[0]);
          }
        } else if (isRoot) {
          // Probably an orphan (root) folder.
          tree.open_node('/orphanFolders', function() {
            selectPath(tree, path);
          });
        }
      }
    };

    var readOnly = false;
    var isReadOnly = function() {return readOnly;};

    var folderMenu = {
      open: {
        label: 'Open',
        action: function(data) {
          var tree = $.jstree.reference(data.reference);
          var node = tree.get_node(data.reference);
          window.location = new XWiki.Document(node.id).getURL();
        }
      },
      openInNewTab: {
        label: 'Open in New Tab',
        action: function(data) {
          var tree = $.jstree.reference(data.reference);
          var node = tree.get_node(data.reference);
          window.open(new XWiki.Document(node.id).getURL());
        }
      },
      refresh: {
        separator_after: true,
        label: 'Refresh',
        icon: '$xwiki.getSkinFile("icons/silk/arrow_refresh.png")',
        action: function(data) {
          var tree = $.jstree.reference(data.reference);
          var node = tree.get_node(data.reference);
          tree.refresh_node(node);
        }
      },
      createFolder: {
        label: 'New Folder',
        icon: '$xwiki.getSkinFile("icons/silk/folder_add.png")',
        action: function(data) {
          var tree = $.jstree.reference(data.reference);
          var parent = tree.get_node(data.reference);
          tree.create_node(parent, asFolderNode({name: 'New Folder'}), 'last', function(newNode) {
            setTimeout(function() {
              tree.edit(newNode);
            }, 0);
          });
        },
        __disabled: isReadOnly
      },
      createFile: {
        label: 'New File',
        icon: '$xwiki.getSkinFile("icons/silk/page_white_add.png")',
        action: function(data) {},
        __disabled: isReadOnly
      },
      cut: {
        separator_before: true,
        label: 'Cut',
        icon: '$xwiki.getSkinFile("icons/silk/cut.png")',
        action: function(data) {
          var tree = $.jstree.reference(data.reference);
          var node = tree.get_node(data.reference);
          tree.cut(node);
        }
      },
      copy: {
        label: 'Copy',
        icon: '$xwiki.getSkinFile("icons/silk/page_white_copy.png")',
        action: function(data) {
          var tree = $.jstree.reference(data.reference);
          var node = tree.get_node(data.reference);
          tree.copy(node);
        }
      },
      paste: {
        label: 'Paste Into Folder',
        icon: '$xwiki.getSkinFile("icons/silk/page_white_paste.png")',
        action: function(data) {
          var tree = $.jstree.reference(data.reference);
          var node = tree.get_node(data.reference);
          tree.paste(node);
        },
        __disabled: function(node) {
          return readOnly || !this.can_paste();
        }
      },
      rename: {
        separator_before: true,
        icon: '$xwiki.getSkinFile("icons/silk/textfield_rename.png")',
        label: 'Rename...',
        action: function(data) {
          var tree = $.jstree.reference(data.reference);
          var node = tree.get_node(data.reference);
          setTimeout(function() {tree.edit(node);}, 0);
        },
        __disabled: isReadOnly
      },
      delete: {
        label: 'Move to Trash',
        icon: '$xwiki.getSkinFile("icons/silk/bin.png")',
        action: function(data) {
          // Display the confirmation after the context menu closes.
          setTimeout(function() {
            if (window.confirm('Are you sure you want to delete this folder?')) {
              var tree = $.jstree.reference(data.reference);
              var node = tree.get_node(data.reference);
              tree.delete_node(node);
            }
          }, 0);
        },
        __disabled: isReadOnly
      }
    };

    var driveMenu = {
      refresh: folderMenu.refresh,
      createFolder: folderMenu.createFolder,
      paste: angular.copy(folderMenu.paste)
    };
    driveMenu.paste.label = 'Paste';

    var runJob = function(service, params, postData, success, error) {
      readOnly = true;

      var onJobUpdate = function(job) {
        if (job &amp;&amp; job.id) {
          if (job.state == 'FINISHED') {
            readOnly = false;
            typeof success == 'function' &amp;&amp; success(job);
          } else if (job.state == 'WAITING') {
            // TODO: Display the overwrite question.
          } else {
            // The job is still running. Wait 1s before asking for a job status update.
            setTimeout(function() {
              Drive.getJobStatus({id: job.id}, onJobUpdate, onError);
            }, 1000);
          }
        } else {
          onError(job);
        }
      }

      var onError = function(response) {
        readOnly = false;
        typeof error == 'function' &amp;&amp; error(response);
      }

      return service(params, postData, onJobUpdate, onError);
    }

    var isFolder = function(node) {
      return !!(node.data &amp;&amp; node.data.type == 'folder');
    };

    var isDrive = function(node) {
      return !!(node.data &amp;&amp; node.data.type == 'drive');
    };

    return {
      restrict: 'E',
      scope: {},
      link: function(scope, element, attrs) {
        $(element).jstree({
          core: {
            data: getChildren,
            'check_callback' : function (operation, node, node_parent, node_position, more) {
              // Allow operations on folders. The target parent must be either a folder or the drive itself, unless the
              // operation is delete in which case we only care that the deleted node is a folder.
              return !readOnly &amp;&amp; isFolder(node) &amp;&amp; (operation == 'delete_node' || isFolder(node_parent)
                || isDrive(node_parent));
            }
          },
          plugins: ['dnd', 'contextmenu'],
          contextmenu: {
            items: function(node, callback) {
              var menu;
              if (!node.data) {
                // No context menu.
              } else if (isFolder(node)) {
                menu = folderMenu;
              } else if (isDrive(node)) {
                menu = driveMenu;
              }
              if (menu) {
                for (var item in menu) {
                  var menuItem = menu[item];
                  if (typeof menuItem.__disabled == 'function') {
                    menuItem._disabled = menuItem.__disabled.call(this, node);
                  }
                }
              }
              return menu;
            }
          },
          dnd: {
            is_draggable: function(nodes) {
              if (readOnly) {
                return false;
              } else {
                // Only folder nodes can be dragged.
                for (var i = 0; i &lt; nodes.length; i++) {
                  var node = nodes[i];
                  if (!isFolder(node)) {
                    return false;
                  }
                }
              }
              return true;
            }
          }

        // Select the node specified on the request URL after the tree is loaded. We tried to listen to the
        // 'ready.jstree' event but it is fired before the drive child nodes are fetched. As a workaround we listen once
        // to the 'after_open.jstree' event, knowing that the drive node is the first tree node that will be opened.
        }).one('after_open.jstree', function(event, data) {
          if (data.node.id == XWiki.currentPage) {
            // The drive node has been opened.
            selectNode(data.instance, $location.search()['driveNode'] || '/allFiles');
          }

        }).on('select_node.jstree deselect_node.jstree', function(event, data) {
          ${escapetool.d}location.search('driveNode', data.selected.length == 1 ? data.selected[0] : null);
          // Prevent nested $apply calls by scheduling the changes to the scope in a future call stack.
          // See https://docs.angularjs.org/error/$rootScope/inprog#inconsistent-api-sync-async-
          setTimeout(function() {
            scope.$apply(function() {
              scope.$emit('driveTree:selectionChange', data.selected);
            })
          }, 0);

        }).on('create_node.jstree', function(event, data) {
          // We don't create the folder now because we want the user to specify the folder name. The folder will be
          // created when the user 'renames' the node that has been created with the default folder name ('New Folder').

        }).on('delete_node.jstree', function(event, data) {
          // Make sure the deleted tree node has an associated folder.
          var folderId = data.node.data.id;
          folderId &amp;&amp; runJob(Folder.delete, {page: folderId}, null, null, function() {
            data.instance.refresh_node(data.node.parent);
          });

        }).on('rename_node.jstree', function(event, data) {
          var folderId = data.node.data.id;
          if (folderId) {
            // Rename a node that has a corresponding folder.
            if (data.old != data.text) {
              var refreshParent = function() {
                data.instance.refresh_node(data.node.parent);
              };
              runJob(Folder.move, {page: folderId}, $.param({
                parent: data.node.parent,
                name: data.text
              }), refreshParent, refreshParent);
            }
          } else {
            // Create a new folder.
            var service = data.node.parent == XWiki.currentPage ? Drive.createFolder : Folder.createFolder;
            service({page: data.node.parent}, $.param({name: data.node.text}), function(folder) {
              data.instance.set_id(data.node, folder.id);
              data.node.data = folder;
              data.node.data.type = 'folder';
            }, function() {
              data.instance.delete_node(data.node);
            });
          }

        }).on('move_node.jstree', function(event, data) {
          var folder = data.node.data;
          // Don't trigger the server-side move unless the tree node has a folder associated.
          if (!folder.id || data.parent == data.old_parent) {
            return;
          }
          runJob(Folder.move, {page: folder.id}, $.param({
            parent: data.parent
          }), function(job) {
            // Job finished. Refresh the new parent node.
            data.instance.refresh_node(data.parent);
          }, function(response) {
            // Job failed. Undo the move.
            // Disconnect the node from the associated folder to prevent moving the folder.
            var folderId = folder.id;
            folder.id = null;
            data.instance.move_node(data.node, data.old_parent, data.old_position);
            // Reconnect the tree node to the folder as soon as possible.
            setTimeout(function() {folder.id = folderId;}, 0);
          });

        }).on('copy_node.jstree', function(event, data) {
          var folder = data.original.data;
          // Don't trigger the server-side move unless the tree node has a folder associated.
          if (!folder.id) {
            return;
          }
          // Mark the copy as folder to be able to delete it in case of error.
          data.node.data = {type: 'folder'};
          runJob(Folder.copy, {page: folder.id}, $.param({
            parent: data.parent
          }), function(job) {
            // Job finished. Refresh the new parent node.
            data.instance.refresh_node(data.parent);
          }, function(response) {
            // Job failed. Undo the copy.
            data.instance.delete_node(data.node);
          });
        });
      }
    };
  }]);
});</code>
    </property>
    <property>
      <name>Directives: driveTree</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>254a86ea-a3c4-41bf-ac58-31ff0d5bc57c</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['angular'], function(angular) {
  var driveFilters = angular.module('driveFilters', []);

  driveFilters.filter('bytes', function() {
    return function(bytes) {
      bytes = parseFloat(bytes);
      if (isNaN(bytes) || !isFinite(bytes)) {
        return '-';
      }
      var precision = 10;
      var base = 1024;
      var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
      var exponent = 0;
      if (bytes &gt; 0) {
        exponent = Math.floor(Math.log(bytes) / Math.log(base));
      }
      var value = bytes / Math.pow(base, Math.floor(exponent));
      if (value != Math.floor(value)) {
        value = Math.floor(value * precision) / precision;
      }
      return value + ' ' + units[exponent];
    }
  });

  driveFilters.filter('mediaType', function() {
    var categories = {
      Text: ['text/', 'application/xml', 'application/javascript', 'application/ecmascript',
        'application/json', 'application/x-sh', '+xml'],
      Image: ['image/'],
      Audio: ['audio/'],
      Video: ['video/'],
      Document: ['application/pdf', 'application/postscript', 'application/msword', 'application/vnd.ms-word.',
        'application/vnd.oasis.opendocument.text', 'application/vnd.openxmlformats-officedocument.word'],
      Presentation: ['application/vnd.ms-powerpoint', 'application/vnd.oasis.opendocument.presentation',
        'application/vnd.openxmlformats-officedocument.presentation'],
      Spreadsheet: ['application/vnd.ms-excel', 'application/vnd.oasis.opendocument.spreadsheet',
        'application/vnd.openxmlformats-officedocument.spreadsheet'],
      Archive: ['application/zip', 'application/x-gzip', 'application/x-bzip', 'application/x-tar',
        'application/x-gtar', 'application/vnd.xara', '-archive', '-compressed', '-package', '+zip'],
      Font: ['application/font-', 'application/x-font-']
    };

    var getCategory = function(mediaType) {
      for (var category in categories) {
        var patterns = categories[category];
        for (var i = 0; i &lt; patterns.length; i++) {
          var pattern = patterns[i];
          if (mediaType == pattern || mediaType.substr(0, pattern.length) == pattern
              || mediaType.substring(mediaType.length - pattern.length) == pattern) {
            return category;
          }
        }
      }
    };

    return function(mediaType) {
      var category = getCategory(mediaType);
      if (category) {
        return category;
      } else {
        mediaType = mediaType.substring(mediaType.indexOf('/') + 1);
        if (mediaType.substr(0, 7) == 'x-font-') {
          // Fonts have a dedicated category so we can remove the 'x-font-' prefix.
          mediaType = mediaType.substr(7);
        } else if (mediaType.substr(0, 2) == 'x-') {
          // Non-standard media type, i.e. not registered with the Internet Assigned Numbers Authority (IANA).
          mediaType = mediaType.substr(2);
        } else if (mediaType.substr(0, 4) == 'vnd.') {
          // Vendor specific media type.
          mediaType = mediaType.substr(4);
        }
        // Many media types end with '+xml' or something similar. Let's remove this part.
        var plusIndex = mediaType.lastIndexOf('+');
        if (plusIndex &gt; 0) {
          mediaType = mediaType.substr(0, plusIndex);
        }
        return mediaType.substr(0, 1).toUpperCase() + mediaType.substr(1);
      }
    }
  });

  driveFilters.filter('timeAgo', ['$filter', function($filter) {
    var referenceTime = (new Date()).getTime();
    // Inspired by http://momentjs.com/docs/#/displaying/fromnow/ .
    var milestones = [
      {
        range: '0 to 45 seconds',
        limit: 45,
        text: 'Seconds ago'
      }, {
        range: '45 to 90 seconds',
        limit: 90,
        text: 'A minute ago'
      }, {
        range: '90 seconds to 45 minutes',
        limit: 2700,
        text: '__x__ minutes ago',
        unit: 60
      }, {
        range: '45 to 90 minutes',
        limit: 5400,
        text: 'An hour ago'
      }, {
        range: '90 minutes to 22 hours',
        limit: 22 * 3600,
        text: '__x__ hours ago',
        unit: 3600
      }, {
        range: '22 to 36 hours',
        limit: 36 * 3600,
        text: 'A day ago'
      }, {
        range: '36 hours to 25 days',
        limit: 25 * 86400,
        text: '__x__ days ago',
        unit: 86400
      }, {
        range: '25 to 45 days',
        value: 45 * 86400,
        text: 'A month ago'
      }, {
        range: '45 to 345 days',
        limit: 345 * 86400,
        text: '__x__ months ago',
        unit: 31 * 86400
      }, {
        range: '345 to 547 days (1.5 years)',
        limit: 547 * 86400,
        text: 'A year ago'
      }, {
        range: '548 days+',
        text: '__x__ years ago',
        unit: 365 * 86400
      }
    ];

    return function(timestamp, dateFormat) {
      var now = (new Date()).getTime();
      if (now - referenceTime &gt; 1000) {
        // The reference time is older than a second. Update it.
        // Note that we need this in order to avoid and infinite $digest loop.
        // See https://docs.angularjs.org/error/$rootScope/infdig .
        referenceTime = now;
      }

      var diff = referenceTime - timestamp;
      if (diff &gt;= 0) {
        diff /= 1000;
        for (var i = 0; i &lt; milestones.length; i++) {
          var milestone = milestones[i];
          if (diff &lt;= milestone.limit) {
            var text = milestone.text;
            if (milestone.unit) {
              text = text.replace('__x__', Math.max(Math.floor(diff / milestone.unit), 2));
            }
            return text;
          } else if (!milestone.limit &amp;&amp; milestone.unit) {
            return milestone.text.replace('__x__', Math.max(Math.floor(diff / milestone.unit), 2));
          }
        }
      }

      // Fall-back on the absolute date display.
      return $filter('date')(timestamp, dateFormat);
    }
  }]);
});</code>
    </property>
    <property>
      <name>Filters</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>907048f6-cec7-4a6b-b40a-d5b3dbf60125</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

#files img.avatar, #files img.icon {
  height: 16px;
  vertical-align: bottom;
}

/* Overwrite the margin from the XWiki skin. */
.jstree ul.jstree-children {
  margin: 0;
}

/* Overwrite the line height from the XWiki skin. */
.jstree-contextmenu a * {
  line-height: inherit;
}

/* Display the root node differently. */
.jstree &gt; .jstree-children &gt; .jstree-node &gt; .jstree-icon {
  display: none;
}
.jstree &gt; .jstree-children &gt; .jstree-node &gt; .jstree-children &gt; .jstree-node {
  margin-left: 0;
}

/* Pane Splitter */
table.pane-splitter {
  border-collapse: collapse;
  table-layout: fixed;
  width: 100%;
}
table.pane-splitter td.pane {
  overflow: hidden;
  padding: 0;
  vertical-align: top;
}
table.pane-splitter td.pane.left {
  width: 25%;
}
table.pane-splitter td.pane-splitter-handler {
  background-color: $theme.borderColor;
  color: $theme.textColor;
  cursor: ew-resize;
  overflow: hidden;
  padding: 0;
  vertical-align: middle;
  width: 1px;
}
table.pane-splitter td.pane-splitter-handler &gt; div {
  margin-left: -3px;
}
table.pane-splitter td.pane .jstree-container-ul,
table.pane-splitter td.pane .xwiki-livetable-container {
  margin: .5em;
}</code>
    </property>
    <property>
      <name>Style</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
