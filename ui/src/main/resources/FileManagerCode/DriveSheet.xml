<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>FileManagerCode</web>
  <name>DriveSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401094916000</creationDate>
  <parent>DriveClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401280484000</date>
  <contentUpdateDate>1401204779000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="FileManagerCode.Macros" /}}

{{velocity output="false"}}
## We need to use HQL because XWQL doesn't support nested queries.
#set ($selectAllFoldersFromDriveHQL = "select folderDoc.fullName from XWikiDocument folderDoc, BaseObject folderObj where folderDoc.space = :space and folderObj.name = folderDoc.fullName and folderObj.className = 'FileManagerCode.FolderClass'")

#macro (handleDriveWebServiceRequest)
  #if ($request.action)
    #if ($services.csrf.isTokenValid($request.form_token))
      #if ($request.action == 'createFolder')
        #createFolder($request.name $doc)
      #elseif ($request.action == 'move')
        #batchMove
      #elseif ($request.action == 'copy')
        #batchCopy
      #elseif ($request.action == 'delete')
        #batchDelete
      #end
    #elseif ($isAjaxRequest)
      $response.sendError(403, 'The CSRF token is missing.')
    #else
      $response.sendRedirect($services.csrf.getResubmissionURL())
    #end
  #else
    #set ($data = $NULL)
    #if ($request.data == 'folders')
      #getChildFolders($doc $data)
    #elseif ($request.data == 'allFiles')
      #getAllFiles
    #elseif ($request.data == 'orphanFolders')
      #getOrphanFolders
    #elseif ($request.data == 'orphanFiles')
      #getOrphanFiles
    #elseif ($request.data == 'activeJobs')
      #getActiveJobs($data)
    #elseif ($request.data == 'jobStatus')
      #getJobStatus($request.jobId $data)
    #else
      #getDrive
    #end
    #if ($data)
      #set ($discard = $response.setContentType('application/json'))
      $jsontool.serialize($data)
    #else
      $response.sendError(404);
    #end
  #end
#end

#macro (batchMove)
  ## TODO: Read the collection of paths and the destination from the request.
  #set ($paths = [])
  #set ($destination = [])
  #set ($jobId = $services.drive.move($paths, $destination))
  #handleJobStartFailure($jobId)
#end

#macro (batchCopy)
  ## TODO: Read the collection of paths and the destination from the request.
  #set ($paths = [])
  #set ($destination = [])
  #set ($jobId = $services.drive.copy($paths, $destination))
  #handleJobStartFailure($jobId)
#end

#macro (batchDelete)
  ## TODO: Read the collection of paths from the request.
  #set ($paths = [])
  #set ($jobId = $services.drive.delete($paths))
  #handleJobStartFailure($jobId)
#end

#macro (getOrphanFolders)
  #set ($statement = "from doc.object(FileManagerCode.FolderClass) as folder where doc.space = :space and (doc.parent = '' or (doc.parent &lt;&gt; :parent and doc.parent not in ($selectAllFoldersFromDriveHQL)))")
  #getFolders($statement {'space': $doc.space, 'parent': $doc.fullName} $data)
#end

#macro (getAllFiles)
  #getFilesStatement('doc.space = :space' $statement)
  #getFiles($statement {'space': $doc.space} $data)
#end

#macro (getOrphanFiles)
  ## A file can have multiple parent folders, which are declared using tags, and one of these parent folders, usually
  ## the first, is set as wiki page parent so that a tree widget (such as the XWiki explorer tree) can still display the
  ## hierarchy nicely.
  #getFilesStatement("doc.space = :space and (doc.parent = '' or doc.parent not in ($selectAllFoldersFromDriveHQL))" $statement)
  #getFiles($statement {'space': $doc.space} $data)
#end

#macro (getDrive)
  #if ($doc.title != '')
    #set ($name = $doc.plainTitle)
  #else
    #set ($name = $doc.space)
  #end
  #set ($data = {
    'id': $doc.space,
    'name': $name,
    'url': $doc.getURL('get')
  })
#end

#macro (xmlJsL10n $key)
$!escapetool.xml($escapetool.javascript($services.localization.render($key)))##
#end

#macro (displayDrive)
  {{html clean="false"}}
  #set ($discard = $xwiki.jsx.use('FileManagerCode.DriveSheet', {'minify': false}))
  #set ($discard = $xwiki.ssfx.use('js/xwiki/table/livetable.css', true))
  &lt;div ng-app="drive" ng-controller="DriveCtrl"&gt;
    &lt;livetable id="files" service="service" columns="[
      {
        id: 'name',
        title: '#xmlJsL10n('Name')',
        type: 'document',
        sortable: true
      }, {
        id: 'size',
        title: '#xmlJsL10n('Size')',
        type: 'fileSize',
        sortable: true
      }, {
        id: 'mediaType',
        title: '#xmlJsL10n('Type')'
      }, {
        id: 'date',
        title: '#xmlJsL10n('Modified')',
        type: 'date',
        sortable: true
      }, {
        id: 'author',
        title: '#xmlJsL10n('Author')',
        type: 'user',
        sortable: true
      }
    ]"&gt;&lt;/livetable&gt;
  &lt;/div&gt;
  {{/html}}
#end
{{/velocity}}

{{velocity}}
#if ($xcontext.action == 'get')
  #handleDriveWebServiceRequest
#else
  #displayDrive
#end
{{/velocity}}</content>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d9f9fdc1-3059-4d56-bfe4-0d8ef78cbab2</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    angular: '//ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular.min',
    'angular-resource': '//ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular-resource.min'
  },
  shim: {
    angular: {
      exports: 'angular'
    },
    'angular-resource': {
      deps: ['angular'],
      exports: 'angular'
    }
  }
});

require(['jquery', 'angular', 'angular-resource'], function($, angular) {
  var drive = angular.module('drive', ['driveServices', 'driveDirectives']);

  drive.controller('DriveCtrl', ['$scope', 'Drive', function ($scope, Drive) {
    $scope.service = Drive.getAllFiles;
  }]);
});</code>
    </property>
    <property>
      <name>App</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>39e1dccf-38d0-4709-90b1-f466d7728ab6</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'angular'], function($, angular) {
  var driveServices = angular.module('driveServices', ['ngResource']);

  var defaultParams = {
    outputSyntax: 'plain',
    space: XWiki.currentSpace,
    page: XWiki.currentPage
  };

  // The colon ':' is URL-encoded so we must decode it otherwise Angular won't find the parameter.
  var url = new XWiki.Document(':page', ':space').getURL('get').replace('/%3A', '/:', 'g');

  var addGET = function(api, data) {
    api['get' + data.substr(0, 1).toUpperCase() + data.substr(1)] = {
      params: {data: data}
    }
  };

  var formToken = $('meta[name=form_token]').attr('content');

  var addPOST = function(api, action) {
    // TODO: Maybe we should submit the data as JSON (Angular's default behaviour) but for this we need to enhance the
    // JSON Velocity tool to read the request payload on the server side. We can use Jackson's raw/untyped/simple data
    // binding (see http://wiki.fasterxml.com/JacksonInFiveMinutes#A.22Raw.22_Data_Binding_Example ).
    api[action] = {
      method: 'POST',
      params: {
        action: action,
        form_token: formToken
      },
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
      }
    }
  }

  var createAPI = function(data, actions) {
    var api = {};

    $.each(data, function(index, value) {
      addGET(api, value);
    });

    $.each(actions, function(index, value) {
      addPOST(api, value);
    });

    return api;
  }

  driveServices.factory('Drive', ['$resource', function($resource) {
    var data = ['folders', 'allFiles', 'orphanFolders', 'orphanFiles', 'activeJobs', 'jobStatus'];
    var actions = ['createFolder', 'createFile', 'move', 'copy', 'delete'];
    var api = createAPI(data, actions);
    api.getActiveJobs.isArray = true;
    return $resource(url, defaultParams, api);
  }]);

  driveServices.factory('Folder', ['$resource', function($resource) {
    var data = ['files', 'folders'];
    var actions = ['createFolder', 'createFile', 'move', 'copy', 'delete'];
    var api = createAPI(data, actions);
    return $resource(url, defaultParams, api);
  }]);

  driveServices.factory('Folder', ['$resource', function($resource) {
    var data = [];
    var actions = ['label', 'move', 'copy', 'delete'];
    var api = createAPI(data, actions);
    return $resource(url, defaultParams, api);
  }]);
});</code>
    </property>
    <property>
      <name>Services</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>4af06c3a-4fbf-4c6f-8d87-01c56417dfbb</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['angular'], function(angular) {
  var driveDirectives = angular.module('driveDirectives', []);

  driveDirectives.directive('pagination', function() {
    return {
      restrict: 'E',
      scope: {
        sourceId: '@for',
        showResultsRange: '@'
      },
      templateUrl: new XWiki.Document('Pagination', 'FileManagerCode').getURL('get'),
      controller: function($scope) {
        $scope.loadPage = function(pageNumber) {
          $scope.$emit('pagination:pageLoading', $scope.sourceId, {
            offset: pageNumber * $scope.limit,
            limit: $scope.limit
          });
        };

        $scope.$on('pagination:pageLoaded', function(event, sourceId, page) {
          if ($scope.sourceId == sourceId) {
            $scope.totalCount = page.totalCount;
            $scope.limit = page.limit;
            $scope.from = page.offset + 1;
            $scope.to = Math.min(page.offset + page.limit, page.totalCount);
            $scope.pageNumber = Math.floor(page.offset / page.limit);
            $scope.pageCount = Math.floor((page.totalCount + page.limit - 1) / page.limit);

            var contextRadius = 4;
            var contextSize = 2 * contextRadius + 1;
            if ($scope.pageCount &lt;= contextSize) {
              $scope.contextFirstPage = 0;
              $scope.contextLastPage = $scope.pageCount - 1;
            } else {
              $scope.contextFirstPage = Math.min(Math.max($scope.pageNumber - contextRadius, 0), $scope.pageCount - contextSize);
              $scope.contextLastPage = Math.max(Math.min($scope.pageNumber + contextRadius, $scope.pageCount - 1), contextSize - 1);
            }
            $scope.pageNumbers = [];
            for (var i = $scope.contextFirstPage; i &lt;= $scope.contextLastPage; i++) {
              $scope.pageNumbers.push(i);
            }
          }
        });
      }
    };
  });

  driveDirectives.directive('pageLink', function() {
    return {
      require: '^pagination',
      restrict: 'E',
      scope: true,
      templateUrl: new XWiki.Document('Pagination', 'FileManagerCode').getURL('get', 'template=pageLink'),
      link: function(scope, element, attrs, paginationCtrl) {
        scope.number = parseInt(attrs.number);
      }
    };
  });

  driveDirectives.directive('livetable',  ["$location", function($location) {
    return {
      restrict: 'E',
      scope: {
        'id': '@',
        'service': '=',
        'columns': '='
      },
      templateUrl: new XWiki.Document('LiveTable', 'FileManagerCode').getURL('get'),
      link: function(scope, element, attrs) {
        var key = function(name) {
          return scope.id + name.substr(0, 1).toUpperCase() + name.substr(1);
        };

        // Initialize the parameters with the values specified in the URL.
        scope.params = {
          offset: $location.search()[key('offset')],
          limit: 5,
          sort: $location.search()[key('sort')],
          order: $location.search()[key('order')]
        };

        if (!scope.params.sort) {
          var getSelectedColumn = function(columns) {
            var firstSortableColumn = null;
            for (var i = 0; i &lt; columns.length; i++) {
              if (columns[i].selected) {
                return columns[i];
              } else if (!firstSortableColumn &amp;&amp; columns[i].sortable) {
                firstSortableColumn = columns[i];
              }
            }
            // If no column is explicitly selected then select the first sortable column.
            return firstSortableColumn;
          };

          var selectedColumn = getSelectedColumn(scope.columns);
          if (selectedColumn) {
            scope.params.sort = selectedColumn.id;
            scope.params.order = selectedColumn.order;
          }
        }

        // Save the parameters in the URL in order to have a bookmarkable state.
        var saveParams = function(newParamValues) {
          newParamValues &amp;&amp; angular.extend(scope.params, newParamValues);
          for (var param in scope.params) {
            $location.search(key(param), scope.params[param]);
          }
        };

        var fetchRows = function(newParamValues) {
          newParamValues &amp;&amp; angular.extend(scope.params, newParamValues);
          scope.rows = scope.service(scope.params, function(rows) {
            saveParams();
            scope.$broadcast('pagination:pageLoaded', scope.id, rows);
          });
        }

        scope.$on('pagination:pageLoading', function(event, sourceId, page) {
          if (sourceId == scope.id) {
            fetchRows({offset: page.offset, limit: page.limit});
          }
        });

        scope.sort = function(column) {
          if (column.sortable) {
            var order = (column.id == scope.params.sort &amp;&amp; scope.params.order != 'desc') ? 'desc' : null;
            fetchRows({sort: column.id, order: order});
          }
        };

        fetchRows();
      }
    };
  }]);

  driveDirectives.directive('wrapIf',  function() {
    return {
      restrict: 'A',
      scope: {
        wrapIf: '='
      },
      link: function(scope, element, attrs) {
        if (!scope.wrapIf) {
          // Replace the element with its contents.
          var domElement = element[0];
          while (domElement.firstChild) {
            domElement.parentNode.insertBefore(domElement.firstChild, domElement);
          }
          element.remove();
        }
      }
    }
  });
});</code>
    </property>
    <property>
      <name>Directives</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
